// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("LOCAL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Company {
  id                 Int                  @id @default(autoincrement())
  name               String
  cnpj               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  TeamUser           TeamUser[]
  Team               Team[]
  User               User[]
  FutureVision       FutureVision[]
  Goal               Goal[]
  GoalsTeam          GoalsTeam[]
  ProcessGoalsTeam   ProcessGoalsTeam[]
  GoalTeamKr         GoalTeamKr[]
  GoalKr             GoalKr[]
  HistoryGoalKr      HistoryGoalKr[]
  HistoryGoalsTeamKr HistoryGoalsTeamKr[]
  Task               Task[]
  TaskUser           TaskUser[]
  Principle          Principle[]
  Proposal           Proposal[]
  GoalUser           GoalUser[]
  GoalUserKr         GoalUserKr[]
  GoalsUser          GoalsUser[]
  GoalsUserKr        GoalsUserKr[]
  HistoryGoalsUserKr HistoryGoalsUserKr[]

  @@map("companies")
}

model TeamUser {
  id        Int        @id @default(autoincrement())
  idCompany Int
  idUser    Int
  idTeam    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  company   Company    @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [idUser], references: [id])
  team      Team       @relation(fields: [idTeam], references: [id], onDelete: Cascade)
  TaskUser  TaskUser[]
  GoalUser  GoalUser[]

  @@map("teamUsers")
}

model Team {
  id               Int                @id @default(autoincrement())
  idCompany        Int
  name             String
  leader           Int
  descriptions     String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  company          Company            @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  TeamUser         TeamUser[]
  ProcessGoalsTeam ProcessGoalsTeam[]

  @@map("teams")
}

model Profile {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model User {
  id          Int           @id @default(autoincrement())
  idCompany   Int?
  idProfile   Int?
  name        String
  photo       String?
  email       String        @unique
  occupation  String
  password    String?
  roles       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  company     Company?      @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  TeamUser    TeamUser[]
  GoalUserKr  GoalUserKr[]
  GoalsUser   GoalsUser[]
  GoalsUserKr GoalsUserKr[]

  @@map("users")
}

model FutureVision {
  id          Int         @id @default(autoincrement())
  idCompany   Int
  title       String
  description String      @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  company     Company?    @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  Principle   Principle[]
  Proposal    Proposal[]
  Goal        Goal[]

  @@map("futureVisions")
}

model Principle {
  id             Int          @id @default(autoincrement())
  idCompany      Int
  idFutureVision Int
  title          String
  description    String       @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  company        Company?     @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  futureVision   FutureVision @relation(fields: [idFutureVision], references: [id], onDelete: Cascade)

  @@map("principles")
}

model Proposal {
  id             Int          @id @default(autoincrement())
  idCompany      Int
  idFutureVision Int
  title          String
  description    String       @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  company        Company?     @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  futureVision   FutureVision @relation(fields: [idFutureVision], references: [id], onDelete: Cascade)

  @@map("proposals")
}

model Goal {
  id               Int                @id @default(autoincrement())
  idCompany        Int
  idFutureVision   Int
  name             String
  author           Int
  descriptions     String
  done             Int                @default(0)
  status           Boolean            @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  company          Company            @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  futureVision     FutureVision       @relation(fields: [idFutureVision], references: [id], onDelete: Cascade)
  GoalsTeam        GoalsTeam[]
  ProcessGoalsTeam ProcessGoalsTeam[]
  GoalKr           GoalKr[]
  HistoryGoalKr    HistoryGoalKr[]
  GoalUser         GoalUser[]
  GoalUserKr       GoalUserKr[]
  GoalsUser        GoalsUser[]

  @@map("goals")
}

model GoalsTeam {
  id               Int                @id @default(autoincrement())
  idCompany        Int
  idGoal           Int
  name             String
  author           Int
  status           Boolean            @default(false)
  descriptions     String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  goal             Goal               @relation(fields: [idGoal], references: [id], onDelete: Cascade)
  company          Company            @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  ProcessGoalsTeam ProcessGoalsTeam[]
  GoalTeamKr       GoalTeamKr[]

  @@map("goalsTeams")
}

model GoalsUser {
  id           Int           @id @default(autoincrement())
  idCompany    Int
  idGoal       Int?
  idUser       Int
  name         String
  status       Boolean       @default(false)
  descriptions String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  goal         Goal?         @relation(fields: [idGoal], references: [id], onDelete: Cascade)
  company      Company       @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [idUser], references: [id], onDelete: Cascade)
  GoalsUserKr  GoalsUserKr[]

  @@map("goalsUsers")
}

model GoalsUserKr {
  id                 Int                  @id @default(autoincrement())
  idCompany          Int
  idUser             Int
  idGoalsUser        Int
  name               String
  descriptions       String
  toQuarterly        Int
  fromQuarterly      Int
  toYearly           Int
  fromYearly         Int
  done               Int                  @default(0)
  status             Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  goalsUser          GoalsUser            @relation(fields: [idGoalsUser], references: [id], onDelete: Cascade)
  company            Company              @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  user               User                 @relation(fields: [idUser], references: [id], onDelete: Cascade)
  HistoryGoalsUserKr HistoryGoalsUserKr[]

  @@map("goalsUsersKrs")
}

model ProcessGoalsTeam {
  id                 Int                  @id @default(autoincrement())
  idGoalsTeam        Int?
  idTeam             Int?
  idGoal             Int?
  idCompany          Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  goalsTeam          GoalsTeam?           @relation(fields: [idGoalsTeam], references: [id], onDelete: Cascade)
  team               Team?                @relation(fields: [idTeam], references: [id], onDelete: Cascade)
  goal               Goal?                @relation(fields: [idGoal], references: [id], onDelete: Cascade)
  comapany           Company              @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  HistoryGoalsTeamKr HistoryGoalsTeamKr[]

  @@map("processGoalsTeams")
}

model GoalTeamKr {
  id                 Int                  @id @default(autoincrement())
  idCompany          Int
  idGoalsTeam        Int
  name               String
  author             Int
  descriptions       String
  toQuarterly        Int
  fromQuarterly      Int
  toYearly           Int
  fromYearly         Int
  done               Int                  @default(0)
  status             Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  company            Company              @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  goalsTeam          GoalsTeam            @relation(fields: [idGoalsTeam], references: [id], onDelete: Cascade)
  HistoryGoalsTeamKr HistoryGoalsTeamKr[]
  Task               Task[]

  @@map("goalTeamKrs")
}

model GoalKr {
  id            Int             @id @default(autoincrement())
  idCompany     Int
  idGoal        Int
  name          String
  author        Int
  descriptions  String
  toQuarterly   Int
  fromQuarterly Int
  toYearly      Int
  fromYearly    Int
  done          Int             @default(0)
  status        Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  company       Company         @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  goal          Goal            @relation(fields: [idGoal], references: [id], onDelete: Cascade)
  HistoryGoalKr HistoryGoalKr[]

  @@map("goalKrs")
}

model HistoryGoalKr {
  id            Int         @id @default(autoincrement())
  idGoalKr      Int
  idGoal        Int
  idCompany     Int
  user          String
  note          String      @db.Text
  status        Boolean     @default(false)
  to            Float
  from          Float
  quaPercentage Float
  yeaPercentage Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  goalKr        GoalKr      @relation(fields: [idGoalKr], references: [id], onDelete: Cascade)
  goal          Goal        @relation(fields: [idGoal], references: [id], onDelete: Cascade)
  company       Company     @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  GoalUserKr    GoalUserKr? @relation(fields: [goalUserKrId], references: [id])
  goalUserKrId  Int?

  @@map("historyGoalKrs")
}

model HistoryGoalsUserKr {
  id            Int         @id @default(autoincrement())
  idGoalsUserKr Int
  idCompany     Int
  note          String      @db.Text
  status        Boolean     @default(false)
  to            Float
  from          Float
  quaPercentage Float
  yeaPercentage Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  goalsUserKr   GoalsUserKr @relation(fields: [idGoalsUserKr], references: [id], onDelete: Cascade)
  company       Company     @relation(fields: [idCompany], references: [id], onDelete: Cascade)

  @@map("historyGoalsUserKrs")
}

model HistoryGoalsTeamKr {
  id                Int              @id @default(autoincrement())
  idProcessGoalTeam Int
  idGoalsTeamKr     Int
  idCompany         Int
  note              String           @db.Text
  user              String
  status            Boolean          @default(false)
  to                Float
  from              Float
  quaPercentage     Float
  yeaPercentage     Float
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  processGoalsTeam  ProcessGoalsTeam @relation(fields: [idProcessGoalTeam], references: [id], onDelete: Cascade)
  goalTeamKr        GoalTeamKr       @relation(fields: [idGoalsTeamKr], references: [id], onDelete: Cascade)
  company           Company          @relation(fields: [idCompany], references: [id], onDelete: Cascade)

  @@map("historyGoalsTeamKrs")
}

model Task {
  id            Int        @id @default(autoincrement())
  idGoalsTeamKr Int
  idCompany     Int
  name          String
  author        Int
  finalDate     DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  goalTeamKr    GoalTeamKr @relation(fields: [idGoalsTeamKr], references: [id], onDelete: Cascade)
  company       Company    @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  TaskUser      TaskUser[]

  @@map("tasks")
}

model TaskUser {
  id          Int       @id @default(autoincrement())
  idTeamUser  Int?
  idCompany   Int
  idTask      Int
  done        Boolean   @default(false)
  description String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  teamUser    TeamUser? @relation(fields: [idTeamUser], references: [id], onDelete: Cascade)
  task        Task      @relation(fields: [idTask], references: [id], onDelete: Cascade)
  company     Company   @relation(fields: [idCompany], references: [id], onDelete: Cascade)

  @@map("taskUsers")
}

model GoalUser {
  id          Int          @id @default(autoincrement())
  idTeamUser  Int
  idCompany   Int
  idGoal      Int
  done        Boolean      @default(false)
  status      Boolean      @default(false)
  description String       @db.Text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  teamUser    TeamUser?    @relation(fields: [idTeamUser], references: [id], onDelete: Cascade)
  goal        Goal         @relation(fields: [idGoal], references: [id], onDelete: Cascade)
  company     Company      @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  GoalUserKr  GoalUserKr[]

  @@map("goalUsers")
}

model GoalUserKr {
  id            Int             @id @default(autoincrement())
  idCompany     Int
  idGoal        Int
  idUser        Int
  idGoalUser    Int
  name          String
  descriptions  String
  to            Int
  fromQuarterly Int
  fromYearly    Int
  done          Int             @default(0)
  status        Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  company       Company         @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  goal          Goal            @relation(fields: [idGoal], references: [id], onDelete: Cascade)
  user          User            @relation(fields: [idUser], references: [id], onDelete: Cascade)
  goalUser      GoalUser        @relation(fields: [idGoalUser], references: [id], onDelete: Cascade)
  HistoryGoalKr HistoryGoalKr[]

  @@map("goalUserKrs")
}
