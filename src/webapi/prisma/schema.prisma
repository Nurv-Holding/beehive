// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id         Int          @id @default(autoincrement())
  name       String
  cnpj       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  TeamUser   TeamUser[]
  Team       Team[]
  User       User[]
  Goal       Goal[]
  GoalsTeam  GoalsTeam[]
  GoalTeamKr GoalTeamKr[]
  GoalKr     GoalKr[]

  @@map("companies")
}

model TeamUser {
  id        Int      @id @default(autoincrement())
  idCompany Int
  idUser    Int
  idTeam    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [idUser], references: [id])
  team      Team     @relation(fields: [idTeam], references: [id], onDelete: Cascade)

  @@map("teamUsers")
}

model Team {
  id               Int                @id @default(autoincrement())
  idCompany        Int
  name             String
  descriptions     String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  company          Company            @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  TeamUser         TeamUser[]
  ProcessGoalsTeam ProcessGoalsTeam[]

  @@map("teams")
}

model Profile {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model User {
  id         Int        @id @default(autoincrement())
  idCompany  Int
  idProfile  Int?
  name       String
  photo      String?
  email      String     @unique
  occupation String
  password   String?
  roles      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  company    Company    @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  TeamUser   TeamUser[]

  @@map("users")
}

model Goal {
  id           Int         @id @default(autoincrement())
  idCompany    Int
  name         String
  descriptions String
  done         Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  company      Company     @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  GoalsTeam    GoalsTeam[]
  GoalKr       GoalKr[]

  @@map("goals")
}

model GoalsTeam {
  id               Int                @id @default(autoincrement())
  idCompany        Int
  idGoal           Int
  name             String
  descriptions     String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  goal             Goal               @relation(fields: [idGoal], references: [id], onDelete: Cascade)
  company          Company            @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  ProcessGoalsTeam ProcessGoalsTeam[]
  GoalTeamKr       GoalTeamKr[]

  @@map("goalsTeams")
}

model ProcessGoalsTeam {
  id          Int        @id @default(autoincrement())
  idGoalsTeam Int?
  idTeam      Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  goalsTeam   GoalsTeam? @relation(fields: [idGoalsTeam], references: [id], onDelete: Cascade)
  team        Team?      @relation(fields: [idTeam], references: [id], onDelete: Cascade)

  @@map("processGoalsTeams")
}

model GoalTeamKr {
  id           Int       @id @default(autoincrement())
  idCompany    Int
  idGoalsTeam  Int
  name         String
  descriptions String
  quarterly    Int
  yearly       Int
  done         Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  company      Company   @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  goalsTeam    GoalsTeam @relation(fields: [idGoalsTeam], references: [id], onDelete: Cascade)

  @@map("goalTeamKrs")
}

model GoalKr {
  id           Int      @id @default(autoincrement())
  idCompany    Int
  idGoal       Int
  name         String
  descriptions String
  quarterly    Int
  yearly       Int
  done         Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  company      Company  @relation(fields: [idCompany], references: [id], onDelete: Cascade)
  goal         Goal     @relation(fields: [idGoal], references: [id], onDelete: Cascade)

  @@map("goalKrs")
}
